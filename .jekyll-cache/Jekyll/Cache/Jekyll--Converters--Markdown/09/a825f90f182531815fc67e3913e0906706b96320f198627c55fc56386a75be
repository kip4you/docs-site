I"<h1 id="email-connector">Email Connector</h1>

<h2 id="1-camunda">1. Camunda</h2>

<p>Initially to create an Email, we need to configure our Camunda BPMN.</p>

<p><img src="./assets/images/email-connector/BPMNEmail.png" alt="Simple example of BPMN" /></p>

<p>In this case it is common to have a task before send the Email in our case we have the <strong>Assess Quotation</strong> task a User Task, that simply approve or disapprove a quotation. If the quotation is approved than it send the <strong>Email Approval Quotation</strong> and if it is not approved it send <strong>Email Disapproval Quotation</strong>.</p>

<p>To simplify this tutorial we’ll only do the Email Approval Quotation. CLicking in the send task we open a tab to configure, first we click in <strong>Implementation</strong> and set te Type to <strong>Delegate Expression</strong> and put in Delegate expression <strong>${akipEmailConnectorDelegate}</strong>, this delegate already exists as a compiled class when we generate the base project.</p>

<p><img src="./assets/images/email-connector/SendTaskImplemantation.png" alt="Email Implementation Configuration" style="display:block; margin-left:auto; margin-right:auto" /></p>

<p>Still in the configuration of Email Approval Quotation we click in <strong>Field injections</strong> and click in <strong>Create a new list item</strong> (plus icon), we’ll add the Name <strong>akipEmailConnectorConfigName</strong>, Type <strong>String</strong> and then the Value that we put the name of the process dot the name of our task using <strong>CamelCase</strong>, in our case it will be <strong>QuotationProcess.EmailApprovalQuotation</strong>.</p>

<p><img src="./assets/images/email-connector/SendTaskInjection.png" alt="Email Field Injection Configuration" style="display:block; margin-left:auto; margin-right:auto" /></p>

<h2 id="2-project-generation">2. Project Generation</h2>

<p>Before we pass to the coding the Email task, we need first to install the AgileKIP Generator to execute the project using the jhipster blueprint, after this we need to create the metadata of the domain, entities and their relations. To create the project step by step it’s recommended to read the tutorial <a href="https://agilekip.github.io/pap-documentation/tutorials/generating-an-app" style="color: blue">here</a></p>

<h2 id="3-into-the-code">3. Into the code</h2>

<p>After we config the Email task in Camunda, just need to construct the body of the email. For that we’ll start by entering the folder with the name of the process through this path: src &gt; main &gt; resources &gt; config &gt; liquibase &gt; data &gt; quotationProcess (in our case). Inside this folder we create three types of file to construct the email: the <strong>content.txt</strong>, <strong>mailbox.txt</strong> and the <strong>subject.txt</strong> all with the name of the process dot the name of the task (example: QuotationProcess.EmailApprovalQuotation.content.txt).</p>

<p><img src="./assets/images/email-connector/pathEmail.png" alt="Path to body of the email" /></p>

<p>First in the subject.txt we’ll fill this file with the title of the Email. Notice that inside this txt we can bring the value of some attribute using the <strong>${}</strong>.</p>

<p><img src="./assets/images/email-connector/subject.png" alt="Email subject" /></p>
:ET