I"%è<h1 id="anonymous-task">Anonymous Task</h1>

<h2 id="what-is-an-anonymous-task">What is an Anonymous Task?</h2>

<p>Anonymous Task is an activity where we can access a task anonymously, in other words, it will have an email that contains a link to lead you to the task no need to have an account in the website, accessing as if a guest.</p>

<h2 id="1-camunda">1. Camunda</h2>

<p>Initially we need to create a Camunda BPMN to organize our process flow, to this in this tutorial we‚Äôll use the Quote Item example.</p>

<p><img src="assets/images/anonymous-task/TaskQuoteItem.png" alt="Task Quote Item in Camunda BPMN" /></p>

<p>The Quote Item, will be our anonymous task, but to turn this activity into an anonymous one we‚Äôll need to include other two tasks before the User Task, being these the Service Task (Akip Configure Anonymous Task) and a Send Task (Email to Provider) that we‚Äôll send a link with a token to access the activity anonymously.
This way:</p>

<p><img src="assets/images/anonymous-task/QuoteItemAnonimo.png" alt="Service Task, Send Task and then the Quote Item task" /></p>

<p>Clicking in the Service Task (Akip Configure Anonymous Task) we must indicate in the delegate section ${akipConfigureAnonymousTaskDelegate} that refers to an existing compiled class in the architecture of reference.</p>

<p><img src="assets/images/anonymous-task/BPMNconfig.png" alt="Service Task delegate configuration" style="display:block; margin-left:auto; margin-right:auto" /></p>

<h2 id="2-project-generation">2. Project Generation</h2>

<p>Before we pass to the coding the anonymous task, we need first to install the AgileKIP Generator to execute the project using the jhipster bluepirnt, after this we need to create the metadata of the domain, entities and their relations. To create the project step by step it‚Äôs recommended to read the tutorial <a href="https://agilekip.github.io/pap-documentation/tutorials/generating-an-app" style="color: blue">here</a></p>

<h2 id="3-into-the-code-backend">3. Into the code (backend)</h2>

<p>In the code of the generated code initially, we need to find in out project the file Controller related to the task, in our example is TaskQuoteItemController.</p>

<p><img src="assets/images/anonymous-task/PathController.png" alt="Path to controller" style="display:block; margin-left:auto; margin-right:auto" /></p>

<p>It‚Äôs indicated that in the Controller, we change the <strong>@RequestMapping(‚Äú/api/‚Ä¶‚Äù)</strong> to <strong>@RequestMapping(‚Äú/api‚Äù)</strong>, and then in the <strong>@GettingMapping</strong> and <strong>PostMapping</strong> use the part that was removed in the @RequestMapping, like this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api"</span><span class="o">)</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/quotation-process/task-quote-item/{id}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">TaskQuoteItemContextDTO</span><span class="o">&gt;</span> <span class="nf">loadContext</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"REST request to load the context of task hotel {}"</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
        <span class="nc">TaskQuoteItemContextDTO</span> <span class="n">taskQuoteItemContext</span> <span class="o">=</span> <span class="n">taskQuoteItemService</span><span class="o">.</span><span class="na">loadContext</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">taskQuoteItemContext</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>After this, for each one of the <strong>@GetMapping</strong> and <strong>@PostMapping</strong> we must do copies with some changes, informing the paths that will be public utilized for the Anonymous Task.</p>

<p>In the image below, when we create the copy for each one, we must pass in the start of the URL the <strong>‚Äú/public‚Äù</strong> to indicate that this will be a public URL, moreover in the final os the URL we need to write the id of the process instance (<strong>processInstanceId</strong>) informing the instance of the process, as well as the Token (<strong>accessTokenNumber</strong>) that will be generated unique for each provider that need to quote items in our case.</p>

<p><img src="assets/images/anonymous-task/PublicGetMappingExemplo.png" alt="GetMapping for public" /></p>

<p>In addition, we must replace the method <strong>loadContext</strong> to <strong>loadContextPublic</strong> and pass the two variables of the URL, <strong>processInstanceId</strong> and <strong>accessTokenNumber</strong> as parameters. The creation of this method will be done in a step further.</p>

<p>Following the red marks in the image, we must change the <strong>log.debug</strong>, passing again the respective variables, <strong>processInstanceId</strong> and <strong>accessTokenNumber</strong>.</p>

<p>Lastly, we use the instance of the service in our task, passing now <strong>loadContextPublic</strong> and the two parameters, <strong>processInstanceId</strong> and <strong>accessTokenNumber</strong>. Following this same logic we gonna create a copy of <strong>claim</strong>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/public/quotation-process/task-quote-item/{processInstanceId}/{accessTokenNumber}/claim"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">TaskQuoteItemContextDTO</span><span class="o">&gt;</span> <span class="nf">claimPublic</span><span class="o">(</span>
    <span class="nd">@PathVariable</span> <span class="nc">Long</span> <span class="n">processInstanceId</span><span class="o">,</span>
    <span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">accessTokenNumber</span>
        <span class="o">)</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"REST request to load the context of task hotel {}"</span><span class="o">,</span> <span class="n">processInstanceId</span><span class="o">,</span> <span class="n">accessTokenNumber</span><span class="o">);</span>
        <span class="nc">TaskQuoteItemContextDTO</span> <span class="n">taskQuoteItemContext</span> <span class="o">=</span> <span class="n">taskQuoteItemService</span><span class="o">.</span><span class="na">claimPublic</span><span class="o">(</span><span class="n">processInstanceId</span><span class="o">,</span> <span class="n">accessTokenNumber</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">taskQuoteItemContext</span><span class="o">);</span>
        <span class="o">}</span>
</code></pre></div></div>

<p>When we create the copy of the complete, we only need to change the URL adding the <strong>‚Äú/public/‚Äù</strong> in the start, and the name of the method complete to <strong>completePublic</strong>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"public/quotation-process/task-quote-item/complete"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">Void</span><span class="o">&gt;</span> <span class="nf">completePublic</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">TaskQuoteItemContextDTO</span> <span class="n">taskQuoteItemContext</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"REST request to complete QuotationProcess.TaskQuoteItem {}"</span><span class="o">,</span> <span class="n">taskQuoteItemContext</span><span class="o">.</span><span class="na">getTaskInstance</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
        <span class="n">taskQuoteItemService</span><span class="o">.</span><span class="na">complete</span><span class="o">(</span><span class="n">taskQuoteItemContext</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">noContent</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>With this we finished the necessary changes for te Controller in the Anonymous Task. The next step is to implement te public methods that we create (loadContextPublic, claimPublic and completePublic). To do this we‚Äôll go to the Service located in:</p>

<p><img src="./assets/images/anonymous-task/ServiceMarcado.png" alt="Location of the Service in the backend" style="display:block; margin-left:auto; margin-right:auto" /></p>

<p>In the Service, we are going to implement the following public methods called in the Controller:</p>

<p><strong>loadContextPublic:</strong> As in the image bellow we have a findBy that will be created in the next steps in the Repository file during the process, beyond that the messages in the <strong>BadRequestErrorException</strong> you can put a specific one respectively, ‚ÄúInvalid accessTokenNumber‚Äù and ‚ÄúTask not found‚Äù.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">TaskQuoteItemContextDTO</span> <span class="nf">loadContextPublic</span><span class="o">(</span><span class="nc">Long</span> <span class="n">processInstanceId</span><span class="o">,</span> <span class="nc">String</span> <span class="n">accessTokenNumber</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">quotationProcessRepository</span>
            <span class="o">.</span><span class="na">findByProcessInstanceIdAndProcessInstanceAccessTokenNumber</span><span class="o">(</span><span class="n">processInstanceId</span><span class="o">,</span> <span class="n">accessTokenNumber</span><span class="o">)</span>
            <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">BadRequestErrorException</span><span class="o">(</span><span class="s">"Invalid AccessTokenNumber"</span><span class="o">));</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">TaskInstance</span><span class="o">&gt;</span> <span class="n">taskInstances</span> <span class="o">=</span> <span class="n">taskInstanceRepository</span><span class="o">.</span><span class="na">findByTaskDefinitionKeyAndProcessInstanceIdAndProcessInstanceAccessTokenNumberOrderByIdDesc</span><span class="o">(</span>
            <span class="no">TASK_QUOTE_ITEM</span><span class="o">,</span>
            <span class="n">processInstanceId</span><span class="o">,</span>
            <span class="n">accessTokenNumber</span>
        <span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">taskInstances</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">BadRequestErrorException</span><span class="o">(</span><span class="s">"Task not found"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="kt">var</span> <span class="n">taskInstanceDTO</span> <span class="o">=</span> <span class="n">taskInstanceMapper</span><span class="o">.</span><span class="na">toDTOLoadTaskContext</span><span class="o">(</span><span class="n">taskInstances</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>

        <span class="nc">QuotationProcessDTO</span> <span class="n">quotationProcess</span> <span class="o">=</span> <span class="n">quotationProcessRepository</span>
            <span class="o">.</span><span class="na">findByProcessInstanceId</span><span class="o">(</span><span class="n">processInstanceId</span><span class="o">)</span>
            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">taskQuoteItemMapper:</span><span class="o">:</span><span class="n">toQuotationProcessDTO</span><span class="o">)</span>
            <span class="o">.</span><span class="na">orElseThrow</span><span class="o">();</span>

        <span class="kt">var</span> <span class="n">taskQuoteItemContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TaskQuoteItemContextDTO</span><span class="o">();</span>
        <span class="n">taskQuoteItemContext</span><span class="o">.</span><span class="na">setTaskInstance</span><span class="o">(</span><span class="n">taskInstanceDTO</span><span class="o">);</span>
        <span class="n">taskQuoteItemContext</span><span class="o">.</span><span class="na">setQuotationProcess</span><span class="o">(</span><span class="n">quotationProcess</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">taskQuoteItemContext</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<p><strong>claimPublic:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="nc">TaskQuoteItemContextDTO</span> <span class="nf">claimPublic</span><span class="o">(</span><span class="nc">Long</span> <span class="n">processInstanceId</span><span class="o">,</span> <span class="nc">String</span> <span class="n">accessTokenNumber</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">TaskQuoteItemContextDTO</span> <span class="n">taskQuoteItemContext</span> <span class="o">=</span> <span class="n">loadContextPublic</span><span class="o">(</span><span class="n">processInstanceId</span><span class="o">,</span> <span class="n">accessTokenNumber</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">taskQuoteItemContext</span><span class="o">.</span><span class="na">getTaskInstance</span><span class="o">().</span><span class="na">getStatus</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="nc">StatusQuotation</span><span class="o">.</span><span class="na">APPROVED</span><span class="o">))</span> <span class="o">{</span>
        <span class="n">taskInstanceService</span><span class="o">.</span><span class="na">claim</span><span class="o">(</span><span class="n">taskQuoteItemContext</span><span class="o">.</span><span class="na">getTaskInstance</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">taskQuoteItemContext</span><span class="o">;</span>
        <span class="o">}</span>
</code></pre></div></div>

<p><strong>completePublic:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">completePublic</span><span class="o">(</span><span class="nc">TaskQuoteItemContextDTO</span> <span class="n">taskQuoteItemContext</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">quotationProcessRepository</span>
        <span class="o">.</span><span class="na">findByProcessInstanceIdAndProcessInstanceAccessTokenNumber</span><span class="o">(</span>
        <span class="n">taskQuoteItemContext</span><span class="o">.</span><span class="na">getQuotationProcess</span><span class="o">().</span><span class="na">getProcessInstance</span><span class="o">().</span><span class="na">getId</span><span class="o">(),</span>
        <span class="n">taskQuoteItemContext</span><span class="o">.</span><span class="na">getQuotationProcess</span><span class="o">().</span><span class="na">getProcessInstance</span><span class="o">().</span><span class="na">getAccessTokenNumber</span><span class="o">()</span>
        <span class="o">)</span>
        <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">BadRequestErrorException</span><span class="o">(</span><span class="s">"kipappProcurementApp.quotationProcess.error.tokenNotFound"</span><span class="o">));</span>

        <span class="n">complete</span><span class="o">(</span><span class="n">taskQuoteItemContext</span><span class="o">);</span>
        <span class="o">}</span>
</code></pre></div></div>

<p>Next step is defining in the Repository of the process (in my case TaskQuoteItemRepository) this Optional:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">QuotationProcess</span><span class="o">&gt;</span> <span class="nf">findByProcessInstanceIdAndProcessInstanceAccessTokenNumber</span><span class="o">(</span><span class="nc">Long</span> <span class="n">processInstanceId</span><span class="o">,</span> <span class="nc">String</span> <span class="n">accessTokenNumber</span><span class="o">);</span>
</code></pre></div></div>

<h2 id="4-into-the-code-frontend">4. Into the code (frontend)</h2>

<p>With the backend organized, we‚Äôll start the frontend accessing the directory:</p>

<p>src &gt; main &gt; webapp &gt; app &gt; entities &gt; name of the process &gt; name of the task</p>

<p>First we open the <strong>service.ts</strong> of the task, inside we create a const <strong>baseApiUrlPublic</strong>, similar with the const that already exists <strong>baseApiUrl</strong>. The unique difference is that between the api and te name of the process we add public staying like this:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="n">baseApiUrlPublic</span> <span class="o">=</span> <span class="err">'</span><span class="n">api</span><span class="o">/</span><span class="kd">public</span><span class="o">/</span><span class="n">quotation</span><span class="o">-</span><span class="n">process</span><span class="o">/</span><span class="n">task</span><span class="o">-</span><span class="n">quote</span><span class="o">-</span><span class="n">item</span><span class="err">'</span><span class="o">;</span>
<span class="kd">const</span> <span class="n">baseApiUrl</span> <span class="o">=</span> <span class="err">'</span><span class="n">api</span><span class="o">/</span><span class="n">quotation</span><span class="o">-</span><span class="n">process</span><span class="o">/</span><span class="n">task</span><span class="o">-</span><span class="n">quote</span><span class="o">-</span><span class="n">item</span><span class="err">'</span><span class="o">;</span>
</code></pre></div></div>

<p>After this, we create the methods <strong>loadContextPublic</strong>, <strong>claimPublic</strong> and <strong>completedPublic</strong>, where their gets and posts follow the same rote that was created in the Controller of the task.</p>

<p><strong>loadContextPublic:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nf">loadContextPublic</span><span class="o">(</span><span class="nl">processInstanceId:</span> <span class="n">number</span><span class="o">,</span> <span class="nl">accessTokenNumber:</span> <span class="n">string</span><span class="o">):</span> <span class="nc">Promise</span><span class="o">&lt;</span><span class="nc">TaskQuoteItemContext</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="o">&lt;</span><span class="nc">TaskQuoteItemContext</span><span class="o">&gt;((</span><span class="n">resolve</span><span class="o">,</span> <span class="n">reject</span><span class="o">)</span> <span class="o">=&gt;</span> <span class="o">{</span>
      <span class="n">axios</span>
        <span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="err">`$</span><span class="o">{</span><span class="n">baseApiUrlPublic</span><span class="o">}/</span><span class="err">$</span><span class="o">{</span><span class="n">processInstanceId</span><span class="o">}/</span><span class="err">$</span><span class="o">{</span><span class="n">accessTokenNumber</span><span class="o">}</span><span class="err">`</span><span class="o">)</span>
        <span class="o">.</span><span class="na">then</span><span class="o">(</span><span class="n">res</span> <span class="o">=&gt;</span> <span class="o">{</span>
          <span class="n">resolve</span><span class="o">(</span><span class="n">res</span><span class="o">.</span><span class="na">data</span><span class="o">);</span>
        <span class="o">})</span>
        <span class="o">.</span><span class="na">catch</span><span class="o">(</span><span class="n">err</span> <span class="o">=&gt;</span> <span class="o">{</span>
          <span class="n">reject</span><span class="o">(</span><span class="n">err</span><span class="o">);</span>
        <span class="o">});</span>
    <span class="o">});</span>
  <span class="o">}</span>
</code></pre></div></div>

<p><strong>claimPublic:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">TaskQuoteItemContextDTO</span> <span class="nf">claimPublic</span><span class="o">(</span><span class="nc">Long</span> <span class="n">processInstanceId</span><span class="o">,</span> <span class="nc">String</span> <span class="n">accessTokenNumber</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">TaskQuoteItemContextDTO</span> <span class="n">taskQuoteItemContext</span> <span class="o">=</span> <span class="n">loadContextPublic</span><span class="o">(</span><span class="n">processInstanceId</span><span class="o">,</span> <span class="n">accessTokenNumber</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">taskQuoteItemContext</span><span class="o">.</span><span class="na">getTaskInstance</span><span class="o">().</span><span class="na">getStatus</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="nc">StatusQuotation</span><span class="o">.</span><span class="na">APPROVED</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">taskInstanceService</span><span class="o">.</span><span class="na">claim</span><span class="o">(</span><span class="n">taskQuoteItemContext</span><span class="o">.</span><span class="na">getTaskInstance</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">taskQuoteItemContext</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<p><strong>completePublic:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">completePublic</span><span class="o">(</span><span class="nc">TaskQuoteItemContextDTO</span> <span class="n">taskQuoteItemContext</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">quotationProcessRepository</span>
            <span class="o">.</span><span class="na">findByProcessInstanceIdAndProcessInstanceAccessTokenNumber</span><span class="o">(</span>
                <span class="n">taskQuoteItemContext</span><span class="o">.</span><span class="na">getQuotationProcess</span><span class="o">().</span><span class="na">getProcessInstance</span><span class="o">().</span><span class="na">getId</span><span class="o">(),</span>
                <span class="n">taskQuoteItemContext</span><span class="o">.</span><span class="na">getQuotationProcess</span><span class="o">().</span><span class="na">getProcessInstance</span><span class="o">().</span><span class="na">getAccessTokenNumber</span><span class="o">()</span>
            <span class="o">)</span>
            <span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">BadRequestErrorException</span><span class="o">(</span><span class="s">"kipappProcurementApp.quotationProcess.error.tokenNotFound"</span><span class="o">));</span>

        <span class="n">complete</span><span class="o">(</span><span class="n">taskQuoteItemContext</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>When we generate the project and consequently the task that we are configuring, we already have files like <strong>details.component.ts</strong>, <strong>details.vue</strong>, <strong>execute.component.ts</strong> and <strong>execute.vue</strong>. As we‚Äôll have an anonymous page, we must create public files.</p>

<p>For this we need to copy the <strong>details.component.ts</strong> and rename to <strong>public-details.component.ts</strong>. In the component we‚Äôll change the name of the class, create an attribute with the name <strong>accessTokenNumber</strong> of string type initializing null.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="n">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nc">TaskQuoteItemPublicDetailsComponent</span> <span class="kd">extends</span> <span class="nc">Vue</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nl">taskQuoteItemService:</span> <span class="nc">TaskQuoteItemService</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TaskQuoteItemService</span><span class="o">();</span>
  <span class="kd">private</span> <span class="nl">taskContext:</span> <span class="nc">TaskQuoteItemContext</span> <span class="o">=</span> <span class="o">{};</span>
  <span class="kd">private</span> <span class="nl">accessTokenNumber:</span> <span class="n">string</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</code></pre></div></div>

<p>In the <strong>beforeRouteEnter</strong> method, we change the if condition passing the <strong>to.params.processInstanceId</strong> and the <strong>to.params.accessTokenNumber</strong>, after alter this we pass the parameter value (to.params.accessTokenNumber) to the variable <strong>vm.accessTokenNumber</strong> created before, and call the method <strong>retrieveContext</strong> passing again the <strong>to.params.processInstanceId</strong> and the <strong>to.params.accessTokenNumber</strong>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">beforeRouteEnter</span><span class="o">(</span><span class="n">to</span><span class="o">,</span> <span class="n">from</span><span class="o">,</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">next</span><span class="o">(</span><span class="n">vm</span> <span class="o">=&gt;</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">to</span><span class="o">.</span><span class="na">params</span><span class="o">.</span><span class="na">processInstanceId</span> <span class="o">&amp;&amp;</span> <span class="n">to</span><span class="o">.</span><span class="na">params</span><span class="o">.</span><span class="na">accessTokenNumber</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">vm</span><span class="o">.</span><span class="na">accessTokenNumber</span> <span class="o">=</span> <span class="n">to</span><span class="o">.</span><span class="na">params</span><span class="o">.</span><span class="na">accessTokenNumber</span><span class="o">;</span>
        <span class="n">vm</span><span class="o">.</span><span class="na">retrieveContext</span><span class="o">(</span><span class="n">to</span><span class="o">.</span><span class="na">params</span><span class="o">.</span><span class="na">processInstanceId</span><span class="o">,</span> <span class="n">to</span><span class="o">.</span><span class="na">params</span><span class="o">.</span><span class="na">accessTokenNumber</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">});</span>
  <span class="o">}</span>
</code></pre></div></div>

<p>Inside the retriveContext method we call the method <strong>loadContextPublic</strong> passing <strong>processInstanceId</strong> and <strong>accessTokenNumber</strong>, finishing the public-details.component.ts.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nf">retrieveContext</span><span class="o">(</span><span class="n">processInstanceId</span><span class="o">,</span> <span class="n">accessTokenNumber</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">taskQuoteItemService</span><span class="o">.</span><span class="na">loadContextPublic</span><span class="o">(</span><span class="n">processInstanceId</span><span class="o">,</span> <span class="n">accessTokenNumber</span><span class="o">).</span><span class="na">then</span><span class="o">(</span><span class="n">res</span> <span class="o">=&gt;</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">taskContext</span> <span class="o">=</span> <span class="n">res</span><span class="o">;</span>
    <span class="o">});</span>
  <span class="o">}</span>
</code></pre></div></div>

<p>Then we must copy the <strong>details.vue</strong> and rename to <strong>public-details.vue</strong>, and just change the <strong>:to</strong> of <strong>router-link</strong> similar to the URL bellow, being the place where QuotationProcess is, you substitute for the name of your process and then the name of the task, that in this example is TaskQuoteItem. To the typescript that we did before work, we must correct the path to the <strong>public-details.component.ts</strong>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">router</span><span class="o">-</span><span class="n">link</span>
          <span class="n">v</span><span class="o">-</span><span class="k">if</span><span class="o">=</span><span class="s">"taskContext.taskInstance.status == 'NEW' || taskContext.taskInstance.status == 'ASSIGNED'"</span>
          <span class="o">:</span><span class="n">to</span><span class="o">=</span><span class="s">"`/public/process-definition/QuotationProcess/${taskContext.quotationProcess.processInstance.id}/TaskQuoteItem/${accessTokenNumber}/execute`"</span>
          <span class="n">tag</span><span class="o">=</span><span class="s">"button"</span>
          <span class="kd">class</span><span class="err">="</span><span class="nc">btn</span> <span class="n">btn</span><span class="o">-</span><span class="n">primary</span><span class="s">"
          data-cy="</span><span class="n">entityDetailsButton</span><span class="s">"
        &gt;
          &lt;font-awesome-icon icon="</span><span class="n">play</span><span class="s">"&gt;&lt;/font-awesome-icon&gt;&amp;nbsp;Execute
        &lt;/router-link&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script lang="</span><span class="n">ts</span><span class="s">" src="</span><span class="o">./</span><span class="n">task</span><span class="o">-</span><span class="n">quote</span><span class="o">-</span><span class="n">item</span><span class="o">-</span><span class="kd">public</span><span class="o">-</span><span class="n">details</span><span class="o">.</span><span class="na">component</span><span class="o">.</span><span class="na">ts</span><span class="err">"</span><span class="o">&gt;&lt;/</span><span class="n">script</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>Next we need to copy the file execute.component.ts and paste renaming to public-execute.component.ts. Then we‚Äôll do changes same as before, rename the class and initiate a variable accessTokenNumber, type string with the value null.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span><span class="o">({</span>
  <span class="n">validations</span><span class="o">,</span>
<span class="o">})</span>
<span class="n">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nc">TaskQuoteItemExecuteComponent</span> <span class="kd">extends</span> <span class="nf">mixins</span><span class="o">(</span><span class="nc">NotifyMixin</span><span class="o">)</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nl">taskQuoteItemService:</span> <span class="nc">TaskQuoteItemService</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TaskQuoteItemService</span><span class="o">();</span>
  <span class="kd">private</span> <span class="nl">taskContext:</span> <span class="nc">TaskQuoteItemContext</span> <span class="o">=</span> <span class="o">{};</span>
  <span class="kd">public</span> <span class="n">isSaving</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</code></pre></div></div>

<p>In the beforeRouteEnter we change the condition of the if passing <strong>to.params.processInstanceId</strong> and <strong>accessTokenNumber</strong>, then the vm.accessTokenNumber receiving to.params.accessTokenNumber. After call vm.claimTaskInstance passing as parameters again <strong>to.params.processInstanceId</strong> and <strong>to.params.accessTokenNumber</strong>;</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">beforeRouteEnter</span><span class="o">(</span><span class="n">to</span><span class="o">,</span> <span class="n">from</span><span class="o">,</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">next</span><span class="o">(</span><span class="n">vm</span> <span class="o">=&gt;</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">to</span><span class="o">.</span><span class="na">params</span><span class="o">.</span><span class="na">taskInstanceId</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">vm</span><span class="o">.</span><span class="na">claimTaskInstance</span><span class="o">(</span><span class="n">to</span><span class="o">.</span><span class="na">params</span><span class="o">.</span><span class="na">taskInstanceId</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">});</span>
  <span class="o">}</span>
</code></pre></div></div>

:ET